// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("DATABASE_URL")
}

// User table 済
model User {
  UserID      Int      @id @unique @default(autoincrement())
  UserName    String   @unique
  UserIcon    String
  created_at  DateTime @default(now())
  Update_at   DateTime @updatedAt

  // Relationships
  organisations  Organisation[]
  userTags      UserTag[]
  answers       Answer[]
  issue         Issue[]
  articles      Article[] @relation("UserArticles")
}

// issue Table 済
model Issue {
  IssueID        Int        @id @unique @default(autoincrement())
  IssueName      String
  IssueDetail    String
  Visibility     Boolean
  PostUserID     Int
  Explanation    String
  CreatedAt      DateTime   @default(now())
  UpdatedAt      DateTime   @updatedAt
  OrganisationID Int
  OptionID       Int

  // Relationships
  postUser       User         @relation(fields: [PostUserID], references: [UserID])
  organisation   Organisation @relation(fields: [OrganisationID], references: [OrganisationID])
  options        Option[]
  answers        Answer[]
  issueTags      IssueTag[]
}

// option Table 済
model Option {
  OptionID       Int      @id @unique @default(autoincrement())
  Option1        String
  Option2        String
  Option3        String
  Option4        String
  CorrectOption  Int
  IssueID       Int

  // Relationships
  issue          Issue    @relation(fields: [IssueID], references: [IssueID])
}

// Article table 済
model Article {
  ArticleID        Int      @id @unique @default(autoincrement())
  ArticleTitle     String
  ArticleLink      String
  ArticleUserName  String
  OrganisationID   Int

  // Relationships
  user             User      @relation("UserArticles", fields: [ArticleUserName], references: [UserName])
  organisation     Organisation? @relation("OrganisationArticles",fields: [ArticleID], references: [OrganisationID])
  articleTags      ArticleTag[]
}

// Answer table 済
model Answer {
  AnswerID       Int      @id @unique @default(autoincrement())
  Decision       Boolean
  IssueID        Int
  AnserUserID    Int
  selectOptionID Int

  // Relationships
  answerUser     User       @relation(fields: [AnserUserID], references: [UserID])
  issue          Issue      @relation(fields: [IssueID], references: [IssueID])
}

// Organisation table 済
model Organisation {
  OrganisationID Int      @id @unique @default(autoincrement())
  OrganisationName String
  discruption    String
  authority      String
  UserID         Int
  ArticleID      Int[]

  // Relationships
  user           User        @relation(fields: [UserID], references: [UserID])
  articles       Article[]   @relation("OrganisationArticles")
  issues         Issue[]
}

// Tag table 済
model Tag {
  TagID          Int      @id @unique @default(autoincrement())
  tagName        String

  // Relationships
  userTags       UserTag[]
  articleTags    ArticleTag[]
  issueTags      IssueTag[]
}

// UserTag table 済
model UserTag {
  UserTagID      Int      @id @unique @default(autoincrement())
  UserID         Int
  TagID          Int

  // Relationships
  user           User       @relation(fields: [UserID], references: [UserID])
  tag            Tag        @relation(fields: [TagID], references: [TagID])
}

// ArticleTag table 済
model ArticleTag {
  ArticleTagID   Int      @id @unique @default(autoincrement())
  ArticleID      Int
  TagID          Int

  // Relationships
  article        Article    @relation(fields: [ArticleID], references: [ArticleID])
  tag            Tag        @relation(fields: [TagID], references: [TagID])
}

// IssueTag table 済
model IssueTag {
  IssueTagID     Int      @id @unique @default(autoincrement())
  IssueID        Int
  TagID          Int

  // Relationships
  issue          Issue      @relation(fields: [IssueID], references: [IssueID])
  tag            Tag        @relation(fields: [TagID], references: [TagID])
}
