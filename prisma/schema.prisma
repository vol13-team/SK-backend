// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("DATABASE_URL")
}

// User table
model User {
  UserID      Int      @id @unique
  UserName    String
  UserIcon    String
  created_at  DateTime
  Update_at   DateTime

  // Relationships
  organisations  Organisation[]
  userTags      UserTag[]
  answers       Answer[]
  issue Issue[]
}

// Issue table
model Issue {
  IssueID       Int      @id @unique
  IssueName     String
  IsuueDetail   String
  Visibility    Boolean
  PostUserID    Int
  explanation   String
  created_at    DateTime
  Update_at     DateTime
  OrganisationID Int
  OptionID      Int

  // Relationships
  postUser   User       @relation(fields: [PostUserID], references: [UserID])
  organisation Organisation @relation(fields: [OrganisationID], references: [OrganisationID])
  options    Option[]
  answers    Answer[]
  issueTags  IssueTag[]
}

// Option table
model Option {
  OptionID       Int      @id @unique
  Option1        String
  Option2        String
  Option3        String
  Option4        String
  CorrectOption  Int

  // Relationships
  issue      Issue    @relation(fields: [OptionID], references: [IssueID])
}

// Article table
model Article {
  ArticleID        Int      @id @unique
  ArticleTitle     String
  ArticleLink      String
  ArticleUserName  String

  // Relationships
  organisation Organisation? @relation(fields: [ArticleID], references: [OrganisationID])
  articleTags ArticleTag[]
}

// Answer table
model Answer {
  AnswerID       Int      @id @unique
  Decision       Boolean
  IssueID        Int
  AnserUserID    Int
  selectOptionID Int

  // Relationships
  answerUser User @relation(fields: [AnserUserID], references: [UserID])
  issue      Issue @relation(fields: [IssueID], references: [IssueID])
}

// Organisation table
model Organisation {
  OrganisationID Int      @id @unique
  OrganisationName String
  discruption    String
  authority      String
  UserID         Int
  ArticleID      Int

  // Relationships
  user      User       @relation(fields: [UserID], references: [UserID])
  articles  Article[]
  issues    Issue[]
}

// Tag table
model Tag {
  TagID    Int      @id @unique
  tagName  String

  // Relationships
  userTags    UserTag[]
  articleTags ArticleTag[]
  issueTags   IssueTag[]
}

// UserTag table
model UserTag {
  UserTagID Int      @id @unique
  UserID    Int
  TagID     Int

  // Relationships
  user User @relation(fields: [UserID], references: [UserID])
  tag  Tag  @relation(fields: [TagID], references: [TagID])
}

// ArticleTag table
model ArticleTag {
  ArticleTagID Int      @id @unique
  ArticleID    Int
  TagID        Int

  // Relationships
  article Article @relation(fields: [ArticleID], references: [ArticleID])
  tag     Tag     @relation(fields: [TagID], references: [TagID])
}

// IssueTag table
model IssueTag {
  IssueTagID Int      @id @unique
  IssueID    Int
  TagID      Int

  // Relationships
  issue Issue @relation(fields: [IssueID], references: [IssueID])
  tag   Tag   @relation(fields: [TagID], references: [TagID])
}
